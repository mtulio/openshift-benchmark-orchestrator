#!/bin/sh

#
# Collect metrics data from Prometheus API.
# See helper function (show_help|-h) for more information.
#
# TODO: migrate run-test.sh to here

#Safeguards
set -o pipefail
set -o nounset
set -o errexit

declare -g OPT_CMD=""

# ####
# MAIN
# ####
function show_help {

    cat <<-EOF
Usage: ${0} command [options]

Available commands:

    cluster         Create or Destroy a cluster.
    dependenceis    Install dependencies
    list            List current components (clusters, results, profiles, etc)
    report          Run pre-build reports based on results collected
    run             Run benchmark from a existing cluster.

Global options:
    -h | --help             Show this help
    --cluster-name {name}   Name of cluster to be created. Should match with installation directory
    --manifests             Create manifests only
    --ignition              Create ignition files only

Available options for 'list' (only):

    --items           List all current items.
    --item {name}     Item to list: cluster-profiles, benchmark-profiles, clusters?, results?

Available options for 'cluster' (only):

    (create|destroy)    Actions to take on cluster: Create or destroy is available.
    --cluster-profile   {name}      Tell profile to provision the cluster
    --run               {run_opt}   Create a cluster and run the tests (depends on run flags)
    --kubeconfig        {path}      Creeate a like to your kubeconfig on .local/{cluster-name}/auth/kubeconfig

Available options for 'run' (only):

    --test-id           {name}  Runner unique identifier.
    --cluster-name      {name}  Cluster name to lookup the kubeconfig: .local/{cluster-name}/auth/kubeconfig
    --benchmark-profile {name}  Benchmark to run the test.
    --dump-prometheus           Dump Prometheus DB to .local/results/{runner-id}/prometheus-db

Examples:
    # Create a cluster
    ${0} create \\
        --cluster-profile aws_m5x1xgp2 \\
        --cluster-name aws_m5x1xgp2

    # Create a cluster and run the test
    ${0} create \\
        --cluster-profile aws_m5x1xgp2 \\
        --cluster-name c1 \\
        --run \\
        --runner-id b1-c1 \\
        --benchmark-profile fio_defaults \\
        --dump-prometheus

    # Start running the test
    ${0} run \\
        --runner-id b1-c1 \\
        --cluster-name c1 \\
        --benchmark-profile fio_defaults \\
        --dump-prometheus

    ${0} run \\
        --runner-id b1-c2 \\
        --cluster-name c2 \\
        --benchmark-profile fio_defaults \\
        --dump-prometheus

    #> Results will be saved on .local/results/{runner-id}

EOF

}

#
# sub commands:
# - create
# - destroy
# - run
#

cmd_cluster() {
    echo ${OPT_CLUSTER_CMD}
    echo "[cluster] command not implemented. Exiting..."
}

cmd_install() {
    echo "[install] command not implemented. Exiting..."
}

cmd_list() {
    echo "[list] command not implemented. Exiting..."
}

cmd_report() {
    echo "[report] command not implemented. Exiting..."
}

cmd_run() {
    echo "[run] command not implemented. Exiting..."
}

set_defaults() {

    # Workdir
    declare -g WORKDIR="${PWD}/$(yq . config.yaml |jq -r .config.workdir)"
    declare -g WORKDIR_CLUSTERS="${PWD}/$(yq . config.yaml |jq -r .config.workdir)/clusters"

    # Installer options
    declare -g OPT_CLUSTER_CMD=""
    declare -g OPT_KUBECONFIG=false

    # 
}

parse_opts() {

    CURRENT_OPTS="$@"
    # NOTE: This requires GNU getopt.
    # '-> On Mac OS X and FreeBSD need to be installed as: brew install gnu-getopt
    GETOPT_SET=`getopt -n 'gather-monitoring-data' \
            -o hd \
            --long debug,help,run,dump-prometheus,cluster-name:,cluster-profile:,test-id:,benchmark-profile:,kubeconfig:, \
            -- "$@"`

    if [ $? != 0 ] ; then
        echo "gnu-getopt seems not to be present. Please install it. Terminating..." >&2 ;
        exit 1 ;
    fi
    eval set -- "${GETOPT_SET}"

    set_defaults
    while true; do
        case "$1" in
            -h | --help         ) show_help; exit 2 ;;
            -d | --debug        ) OPT_DEBUG=true; shift ;;
            --battery-id        ) OPT_GATHER_QUERY="$2"; shift 2 ;;
            --test-id           ) OPT_GATHER_QUERY_RANGE="$2"; shift 2 ;;
            --cluster-name      ) OPT_CLUSTER_NAME=$1 ; shift 2 ;;
            --cluster-profile   ) OPT_GATHER_QUERY="$2"; shift 2 ;;
            --benchmark-profile ) OPT_GATHER_QUERY="$2"; shift 2 ;;
            -- ) shift; break ;;
            * ) echo "Option not found"; break ;;
        esac
    done

    case ${OPT_CMD} in
        "install"   ) cmd_install ;;
        "list"      ) cmd_list ;;
        "report"    ) cmd_report ;;
        "run"       ) cmd_run ;;
    esac
}

parse_opt_cluster() {

    set_defaults
    case ${1} in
        "create"|"destroy") OPT_CLUSTER_CMD="${1}"; shift ;;
        * ) echo "Create target was not found. Use one of: create|destroy"; exit 1 ;;
    esac

    CURRENT_OPTS="$@"
    # NOTE: This requires GNU getopt.
    # '-> On Mac OS X and FreeBSD need to be installed as: brew install gnu-getopt
    GETOPT_SET=`getopt -n 'ocp-benchmark' \
            -o hdcd \
            --long debug,help,cluster-name:,cluster-profile:,kubeconfig, \
            -- "$@"`

    if [ $? != 0 ] ; then
        echo "gnu-getopt seems not to be present. Please install it. Terminating..." >&2 ;
        exit 1 ;
    fi
    eval set -- "${GETOPT_SET}"

    while true; do
        case "$1" in
            -h | --help         ) show_help; exit 2 ;;
            -d | --debug        ) OPT_DEBUG=true; shift ;;
            --cluster-name      ) OPT_CLUSTER_NAME="$2" ; shift 2 ;;
            --cluster-profile   ) OPT_CLUSTER_PROFILE="$2"; shift 2 ;;
            --kubeconfig        ) OPT_KUBECONFIG=true; shift ;;
            -- ) shift; break ;;
            * ) echo "Option not found"; break ;;
        esac
    done

    # Validations
    if [[ -z ${OPT_CLUSTER_NAME:-} ]]; then
        echo "ERROR: missing flag --cluster-name {name}";
        exit 1
    fi

    if [[ ${OPT_KUBECONFIG:-} == true ]]; then
        if [[ "${KUBECONFIG:-}x" == "x" ]]; then
            echo "ERROR: --kubeconfig was set but KUBECONFIG environment was not found";
            exit 1;
        fi
        echo "Using KUBECONFIG=${KUBECONFIG}"
    fi

    # Globals
    declare -g CLUSTER_KUBECONFIG=${WORKDIR_CLUSTERS}/${OPT_CLUSTER_NAME}/auth/kubeconfig

    source $(dirname $0)/src/cluster
    installer_cluster_main
}

parse_cmds() {
    case ${1:-""} in
    "cluster"|"c"       ) OPT_CMD="$1"; shift; parse_opt_cluster "$@";;
    "dependencies"|"d"  ) OPT_CMD="$1"; shift; parse_opts "$@";;
    "list"              ) OPT_CMD="$1"; shift; parse_opts "$@";;
    "report"            ) OPT_CMD="$1"; shift; parse_opts "$@";;
    "run"               ) OPT_CMD="$1"; shift; parse_opts "$@";;
    *) echo "Command [${1:-}] not found"; show_help;;
    esac
}

parse_cmds "$@"
