#!/bin/sh

# run_$job_name

#
# FIO etcd
#
task_fio_etcd_defaults() {

  local node_name="${1}"
  local log_stdout=${result_path_base}/fio_etcd-${OPT_JOB_NAME}-${node_name}.txt

  echo "RUNNING job fio_etcd_defaults() on node ${node_name}"

  # Run etcd-fio (right after all FIO burn)
  ${oc_cmd} debug node/${node_name} -- chroot /host /bin/bash -c \
    "podman run \
      --volume /var/lib/etcd:/var/lib/etcd:Z \
      quay.io/openshift-scale/etcd-perf" > ${log_stdout} ;
}

#
# FIO
#
run_fio() {

  local node_name="${1}"
  local log_stdout=${result_path_base}/fio_stdout-${OPT_JOB_NAME}-${node_name}.txt

  local task_base_dir=$(yq -r ".task_profiles.${task_name}.base_dir" ${GLOBAL_CONFIG})
  local task_loop=$(yq -r ".task_profiles.${task_name}.loop" ${GLOBAL_CONFIG})
  if [[ ! -z ${OPT_TASK_LOOP:-} ]]; then
    task_loop=${OPT_TASK_LOOP}
  fi
  local task_benckmark_base_path="${task_base_dir}/_benchmark"
  local task_results_file="${task_benckmark_base_path}_results.tar.gz"

  echo "#cluster=${OPT_CLUSTER_NAME}> Running task [${task_name}] on node [${node_name}], registering on log file ${log_stdout}" |tee -a ${log_stdout}
  
  set -x
  ${oc_cmd} debug node/${node_name} -- chroot /host /bin/bash -c \
    "echo \"[0] <=> \$(hostname) <=> \$(date) <=> \$(uptime) \"; \
    mkdir -p ${task_benckmark_base_path}; \
    for offset in {1..${task_loop}} ; do \
        podman run --rm \
            -v ${task_benckmark_base_path}:${task_benckmark_base_path}:Z \
            ljishen/fio \
                $(yq -r ".task_profiles.${task_name}.commands" ${GLOBAL_CONFIG})
                --directory=${task_benckmark_base_path} \
                --name=fio_io_\${offset} \
                --output-format=json \
                --output=${task_benckmark_base_path}/result_\${offset}.json ;\
        sleep 10; \
        rm -f ${task_benckmark_base_path}/fio_io_* ||true ; \
        echo \"[\$offset] <=> \$(hostname) <=> \$(date) <=> \$(uptime) \"; \
    done; \
    tar cfz ${task_results_file} ${task_benckmark_base_path}*/*.json" \
      2>/dev/null | tee -a ${log_stdout}

  # collect results (copy directly from node)
  ${oc_cmd} debug node/${node_name} -- chroot /host /bin/bash -c \
    "cat ${task_results_file}" \
    2>/dev/null > ${result_path_base}/${task_name}-${OPT_JOB_NAME}-${node_name}.tar.gz

  set +x
}

task_fio_libaio_rw() {
  run_fio "$@"
}

task_aws_fio_randrw() {
  run_fio "$@"
}

task_aws_fio_randread() {
  run_fio "$@"
}

task_aws_fio_randwrite() {
  run_fio "$@"
}

task_fio_libaio_read() {
  run_fio "$@"
}

task_fio_libaio_write() {
  run_fio "$@"
}

task_fio_libaio_randread() {
  run_fio "$@"
}

task_fio_libaio_randwrite() {
  run_fio "$@"
}

task_fio_libaio_randrw() {
  run_fio "$@"
}

task_aws_gp_fio_psync_randwrite() {
  run_fio "$@"
}

task_aws_gp_fio_psync_randread() {
  run_fio "$@"
}

task_aws_gp_fio_psync_randrw() {
  run_fio "$@"
}

task_fio_sync_write() {
  run_fio "$@"
}

task_fio_sync_read() {
  run_fio "$@"
}

task_fio_sync_rw() {
  run_fio "$@"
}

task_fio_sync_write_alias() {
  run_fio "$@"
}

task_fio_ebs_initialize() {
    local node_name="${1}"
    ${oc_cmd} debug node/${node_name} -- chroot /host /bin/bash -c \
        "echo \"[0] <=> \$(hostname) <=> \$(date) <=> \$(uptime) \"; \
        podman run --rm \
            ljishen/fio $(yq -r ".task_profiles.${task_name}.commands" ${GLOBAL_CONFIG}) ;
        echo \"[\$offset] <=> \$(hostname) <=> \$(date) <=> \$(uptime) \"; \
        " 2>/dev/null
    }

#
# Prometheus
#

task_prometheus_dump() {
  # Prometheus DB
  echo "#> Waiting 5m to collect PrometheusDB..."
  sleep 300

  local dump_dir=${result_path_base}/prometheus_dump-${OPT_JOB_NAME}
  mkdir -p ${dump_dir}

  ${oc_cmd} rsync -c prometheus -n openshift-monitoring \
    pod/prometheus-k8s-0:/prometheus/ ${dump_dir} || true

  tar cfJ ${dump_dir}.tar.xz ${dump_dir}
  test -f ${dump_dir}.tar.xz && rm -rf ${dump_dir} 
}
